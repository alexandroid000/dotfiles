# Default Options
# ===============

# colorized output
# ----------------
alias ls='ls --color=auto'
[[ "$OS_DISTRO" == "freebsd" ]] && alias ls='ls -G'
alias grep='grep --color=auto'
becho() { echo '\033[0;34m'$@'\033[0m' }
gecho() { echo '\033[0;32m'$@'\033[0m' }
recho() { echo '\033[0;31m'$@'\033[0m' }

# convenient cd
# -------------
chpwd() { ls }              # ls when cd
c() {                       # cd with bookmarks
    dirname="$1"
    [[ -z "$dirname" ]] && dirname="$HOME"          # homedir
    case "$dirname" in                              # bookmarks
        b)          dirname="$HOME/projects/bounce" ;;
        em)         dirname="$HOME/documents/fa17/embedded" ;;
    esac
    cd "$dirname"
}

# longer tail/head
# ----------------
alias tail='tail -n30'
alias head='head -n30'

# compression
# -----------
alias tarx='tar -xvf'
tarc() { tar -zcvf $1.tar.gz $1 }
zipd() { zip -rv $1.zip $1 }
alias unrar='unrar e'

# backup
# ------
backup() {
    dest="$1"
    [[ ! -d "$dest" ]] && return 1
    rsync --progress --partial --archive --verbose --ignore-existing \
            --delete -e ssh \
        texmf projects papers "$dest"
}

# simple web server
# -----------------
http() {
    python -m http.server $@
}

# Shortcuts
# =========

function pdf() {
    mupdf-x11 "$1" &
}


# browser
# -------
o() {
    site="$1"
    [[ -z "$site" ]] && site = 'https://google.com' # homepage
    case "$site" in                                 # bookmarks
        500)    site='http://www.math.illinois.edu/~ruiloja/Math500/'   ;;
        ws)
            site='http://thewatchseries.be/tvshow'
            series="$2"
            case "$series" in
                kimmy)  series="unbreakable-kimmy-schmidt"              ;;
                got)    series="game-of-thrones"                        ;;
                sil)    series="silicon-valley"                         ;;
                robot)  series="mr_robot"                               ;;
            esac
            site="$site/$series"
            ;;
    esac
    $BROWSER $site
}

# printing
# --------
p() {
    copies='1' \
        && echo "$1" | grep '^[0-9]*$' &>/dev/null && copies="$1" \
        && shift
    sides='-o sides=two-sided-long-edge' \
        && [[ "$1" == 'onesided' ]] && sides='-o sides=one-sided' \
        && shift
    pages='' \
        && [[ "$1" == 'pages'    ]] && pages='-o page-ranges='"$2" \
        && shift && shift

    file="$1" && [[ ! -f "$file" ]] && echo "No file '$file'" && return 1
    shift

    lpr '-#'$copies $sides $pages $@ "$file"
}

# mail
# ----
m() {
    if [[ "$#" -lt '1' ]]; then
        mutt
        return
    fi
    case "$1" in
        c|check)
            if [[ "$(ps aux | grep -c offlineimap)" -gt '1' ]]; then
                pkill -9 offlineimap
                rm ~/.offlineimap/pid
            fi
            offlineimap
            ;;
        *)
            echo "Unrecognized option: '$1'"
            return 1
            ;;
    esac
}

# crop pdf
# --------
crop_pdf() {
    start_page="$1"
    stop_page="$2"
    input_file="$3"
    output_file="$4"
    [[ -z "$start_page" ]] || [[ -z "$stop_page" ]] \
        || [[ ! -f "$input_file" ]] || [[ -z "$output_file" ]] \
        && return 1
    gs -dFirstPage="$start_page" -dLastPage="$stop_page" \
        -sOutputFile="$output_file" -dSAFER -dNOPAUSE -dBATCH \
        -dPDFSETTING=/default -sDEVICE=pdfwrite -dCompressFonts=true \
        -c ".setpdfwrite << /EncodeColorImages true /DownsampleMonoImages false \
        /SubsetFonts true /ASCII85EncodePages false \
        /DefaultRenderingIntent /Default /ColorConversionStrategy \
        /LeaveColorUnchanged /MonoImageDownsampleThreshold 1.5 \
        /ColorACSImageDict << /VSamples [ 1 1 1 1 ] /HSamples [ 1 1 1 1 ] \
        /QFactor 0.4 /Blend 1 >> /GrayACSImageDict << /VSamples [ 1 1 1 1 ] \
        /HSamples [ 1 1 1 1 ] /QFactor 0.4 /Blend 1 >> \
        /PreserveOverprintSettings false /MonoImageResolution 300 \
        /MonoImageFilter /FlateEncode /GrayImageResolution 300 \
        /LockDistillerParams false /EncodeGrayImages true /MaxSubsetPCT 100 \
        /GrayImageDict << /VSamples [ 1 1 1 1 ] /HSamples [ 1 1 1 1 ] \
        /QFactor 0.4 /Blend 1 >> /ColorImageFilter /FlateEncode \
        /EmbedAllFonts true /UCRandBGInfo /Remove /AutoRotatePages /PageByPage \
        /ColorImageResolution 300 /ColorImageDict << /VSamples [ 1 1 1 1 ] \
        /HSamples [ 1 1 1 1 ] /QFactor 0.4 /Blend 1 >> /CompatibilityLevel 1.7 \
        /EncodeMonoImages true /GrayImageDownsampleThreshold 1.5 \
        /AutoFilterGrayImages false /GrayImageFilter /FlateEncode \
        /DownsampleGrayImages false /AutoFilterColorImages false \
        /DownsampleColorImages false /CompressPages true \
        /ColorImageDownsampleThreshold 1.5 /PreserveHalftoneInfo false >> \
        setdistillerparams" -f "$input_file"
}

# markdown publishing
md() {
    format="$1"
    md_doc="$2"
    template="default"

    case "$format" in
        markdown)   ext='md'                    ;;
        latex)      ext='pdf'                   ;;
        my-latex)   ext='pdf'; format='latex';
                    template="my_template.tex"  ;;
        latex-raw)  ext='tex'; format='latex'   ;;
        beamer)     ext='pdf'                   ;;
        beamer-raw) ext='tex'; format='beamer'  ;;
        html)       ext='html'     ;;
        *)          ext="$format" ;;
    esac

    pandoc --standalone --filter=pandoc-citeproc \
           --from=markdown --to="$format" --template="$template" \
           --output="${md_doc%.*}.$ext" "$md_doc" \
           || echo "pandoc error ..." >&2
}

mkpdf() {
    doc="$1"
    bibtex "${doc%.*}"
    pdflatex "$doc"
    pdflatex "$doc"
    rm *.log *.out *.bbl *blg
}

    


# System
# ======

# hardware aliases
# ----------------
alias mem='hw mem'

# copy etc
# --------
cp_etc() {
    dir="$1"
    [[ ! -d "$DOTFILES/etc/$dir" ]] && return 1
    for file in $(find "$DOTFILES/etc/$dir" -type f); do
        sudo cp "$file" "${file#$DOTFILES}"
    done
}

# ogv format to mp3 (audio only)
# ------------------------------
convert() {
    conversion="$1" && shift
    infile="$1"
    fname="${infile%\.*}"
    case "$conversion" in
        ogv2mp3)    ffmpeg -i "$ogvfile" "$fname".mp3
                    ;;
        svg2pdf)    rsvg-convert -f pdf -o "$fname".pdf "$fname".svg
                    ;;
        *)          echo "Unknown conversion, doing nothing"
                    ;;
    esac
}


# ROS utils
# ---------

ros() {
  source /opt/ros/kinetic/setup.zsh
  export PYTHONPATH=/opt/ros/kinetic/lib/python2.7/site-packages:$PYTHONPATH
  export PKG_CONFIG_PATH="/opt/ros/kinetic/lib/pkgconfig:$PKG_CONFIG_PATH"

  # Useful aliases
  alias catkin_make="catkin_make -DPYTHON_EXECUTABLE=/usr/bin/python2 -DPYTHON_INCLUDE_DIR=/usr/include/python2.7 -DPYTHON_LIBRARY=/usr/lib/libpython2.7.so"

### ROS path
  typeset -T ROS_PACKAGE_PATH ros_package_path
  ros_package_path=(/home/alli/catkin_ws $ros_package_path)
  export ROS_PACKAGE_PATH
  export ros_package_path
  typeset -U ROS_PACKAGE_PATH ros_package_path

  fix_ros_ip

  # If you use Gazebo:
  #source /usr/share/gazebo/setup.sh
}

# replace "localhost" in URI so ghc can resolve it?
fix_ros_ip() {
    if [[ "${ROS_MASTER_URI#*localhost}" != "$ROS_MASTER_URI" ]]; then
        uri="${ROS_MASTER_URI##*localhost:}"
        export ROS_MASTER_URI="http://127.0.0.1:"$uri
    fi
    export ROS_IP=127.0.0.1
    export ROS_HOSTNAME=127.0.0.1
}


# download cs421 video
# --------------------
cs421_vid() {
    vid="$1"
    [[ -z "$vid" ]] && return 1
    wget 'https://courses.engr.illinois.edu/cs421/static/videos/'"$vid/$vid"'.mp4'
}

# backup
# ------
backup() {
    dest="$1"
    [[ ! -d "$dest" ]] && return 1
    rsync --progress --partial --archive --verbose --ignore-existing --delete \
        bin docs dotfiles .mail media .passwd src .ssh todo.md work "$dest"
}


# Remote Control
# ==============

# remote x control
# ----------------
xdo_remote() {
    ssh_serv="$1"
    [[ -z "$ssh_serv" ]] && return 1
    xdotoolize | ssh "$ssh_serv" 'export DISPLAY=:0; while read key_line; do \
        xdotool key $key_line; done'
}

# Hardware
# ========

# reset wireless card
# -------------------
rip() {
    sudo ip link set wlp2s0 down
    echo "wlp2s0 down"
    sleep 10
    sudo ip link set wlp2s0 up
    echo "wlp2s0 up"
}

# dual monitor display
# --------------------
alias xmonitor="xrandr --output VGA-1 --auto --left-of eDP-1"


# Media
# =====

# mpv on remote server
# --------------------
remote_mpv() {
    server="$1"
    [[ -z "$server" ]] && return 1
    url="$2"
    [[ -z "$url" ]] && return 1
    ssh $1 'export DISPLAY=:0; mpv '"$url"
}


# Scheduling
# ==========

# schedule today
# --------------
today() {
    day_offset="$1"
    schedule_file="~/schedule.md"
    [[ -z "$day_offset" ]] && day_offset='0'
    dDay="$(date --date="$day_offset days" +%A | awk '{print tolower($0)}')"
    dDate="$(date --date="$day_offset days" +'%b %-d')"
    pandoc-tangle --from=markdown --to=markdown \
                  --section="$dDay|$dDate" "$schedule_file"
}

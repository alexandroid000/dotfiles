# Default Options
# ===============

# colors
# ------
alias ls='ls --color=auto'
[[ "$OS_DISTRO" == "freebsd" ]] && alias ls='ls -G'
alias grep='grep --color=auto'
becho() { echo '\033[0;34m'$@'\033[0m' }
gecho() { echo '\033[0;32m'$@'\033[0m' }
recho() { echo '\033[0;31m'$@'\033[0m' }

# convenient cd
# -------------
chpwd() { ls }              # ls when cd
c() {                       # cd with bookmarks
    dirname="$1"
    [[ -z "$dirname" ]] && dirname="$HOME"          # homedir
    case "$dirname" in                              # bookmarks
        421)    dirname="$HOME/work/cs421" ;;
        522)    dirname="$HOME/work/uiuc-cs522" ;;
        526)    dirname="$HOME/work/uiuc-cs526" ;;
        ctl)    dirname="$HOME/work/llvm-semantics/semantics" ;;
    esac
    cd "$dirname"
}

# longer tail/head
# ----------------
alias tail='tail -n30'
alias head='head -n30'

# compression
# -----------
alias tarx='tar -xvf'
tarc() { tar -cvf $1.tar $1 }
zipd() { zip -rv $1.zip $1 }
alias unrar='unrar e'


# Shortcuts
# =========

# app specifiers
# --------------
alias e="$EDITOR"                   # editor
alias v="$VIEWER"                   # viewer
alias gg='sr google'                # search
alias p='lpr'                       # printer
alias po='lpr -o sides=one-sided'   # one-sided printing
o() {                               # browser
    site="$1"
    [[ -z "$site" ]] && site = 'https://google.com' # homepage
    case "$site" in                                 # bookmarks
        421)    site='http://courses.engr.illinois.edu/cs421' ;;
        522)    site='http://courses.engr.illinois.edu/cs522' ;;
        526)    site='http://courses.engr.illinois.edu/cs526' ;;
        gitlab) site='https://gitlab-beta.engr.illinois.edu'  ;;
        ws)
            site='http://thewatchseries.be/tvshow'
            series="$2"
            case "$series" in
                kimmy*) series="unbreakable-kimmy-schmidt" ;;
            esac
            site="$site/$series"
            ;;
    esac
    $BROWSER $site
}

# crop pdf
# --------
crop_pdf() {
    start_page="$1"
    stop_page="$2"
    input_file="$3"
    output_file="$4"
    [[ -z "$start_page" ]] || [[ -z "$stop_page" ]] \
        || [[ ! -f "$input_file" ]] || [[ -z "$output_file" ]] \
        && return 1
    gs -dFirstPage="$start_page" -dLastPage="$stop_page" \
        -sOutputFile="$output_file" -dSAFER -dNOPAUSE -dBATCH \
        -dPDFSETTING=/default -sDEVICE=pdfwrite -dCompressFonts=true \
        -c ".setpdfwrite << /EncodeColorImages true /DownsampleMonoImages false \
        /SubsetFonts true /ASCII85EncodePages false \
        /DefaultRenderingIntent /Default /ColorConversionStrategy \
        /LeaveColorUnchanged /MonoImageDownsampleThreshold 1.5 \
        /ColorACSImageDict << /VSamples [ 1 1 1 1 ] /HSamples [ 1 1 1 1 ] \
        /QFactor 0.4 /Blend 1 >> /GrayACSImageDict << /VSamples [ 1 1 1 1 ] \
        /HSamples [ 1 1 1 1 ] /QFactor 0.4 /Blend 1 >> \
        /PreserveOverprintSettings false /MonoImageResolution 300 \
        /MonoImageFilter /FlateEncode /GrayImageResolution 300 \
        /LockDistillerParams false /EncodeGrayImages true /MaxSubsetPCT 100 \
        /GrayImageDict << /VSamples [ 1 1 1 1 ] /HSamples [ 1 1 1 1 ] \
        /QFactor 0.4 /Blend 1 >> /ColorImageFilter /FlateEncode \
        /EmbedAllFonts true /UCRandBGInfo /Remove /AutoRotatePages /PageByPage \
        /ColorImageResolution 300 /ColorImageDict << /VSamples [ 1 1 1 1 ] \
        /HSamples [ 1 1 1 1 ] /QFactor 0.4 /Blend 1 >> /CompatibilityLevel 1.7 \
        /EncodeMonoImages true /GrayImageDownsampleThreshold 1.5 \
        /AutoFilterGrayImages false /GrayImageFilter /FlateEncode \
        /DownsampleGrayImages false /AutoFilterColorImages false \
        /DownsampleColorImages false /CompressPages true \
        /ColorImageDownsampleThreshold 1.5 /PreserveHalftoneInfo false >> \
        setdistillerparams" -f "$input_file"
}

# copy etc
# --------
cp_etc() {
    dir="$1"
    [[ ! -d "$DOTFILES/etc/$dir" ]] && return 1
    for file in $(find "$DOTFILES/etc/$dir" -type f); do
        sudo cp "$file" "${file#$DOTFILES}"
    done
}

# kernel building
# ---------------
rebuild_kernel() {
    sudo mount /dev/sda2 /boot
    sudo make -j5 -l15 \
        && sudo make modules_install \
        && sudo make install \
        && sudo grub2-mkconfig -o /boot/grub/grub.cfg
}

# download cs421 video
# --------------------
cs421_vid() {
    vid="$1"
    [[ -z "$vid" ]] && return 1
    wget 'https://courses.engr.illinois.edu/cs421/static/videos/'"$vid/$vid"'.mp4'
}

# easy-launch X sessions
# ----------------------
alias emul='startx /usr/bin/qemu-system-x86_64 -kernel'
alias mpv='startx /usr/bin/mpv'
alias firefox='startx /usr/bin/firefox'
alias mupdf='startx /usr/bin/mupdf'
alias private='startx /usr/bin/firefox -private'

# backup
# ------
backup() {
    dest="$1"
    [[ ! -d "$dest" ]] && return 1
    rsync --progress --partial --archive --verbose --ignore-existing --delete \
        bin docs dotfiles .mail media .passwd src .ssh todo.md work "$dest"
}


# Remote Control
# ==============

# remote x control
# ----------------
xdo_remote() {
    ssh_serv="$1"
    [[ -z "$ssh_serv" ]] && return 1
    xdotoolize | ssh "$ssh_serv" 'export DISPLAY=:0; while read key_line; do \
        xdotool key $key_line; done'
}


# Hardware
# ========

# system-stats
# ------------
alias bat='cat /sys/class/power_supply/BAT1/energy_*'
alias temp='ls -d /sys/class/thermal/thermal_zone* | xargs -I f cat f/temp'

# suspend/hibernate
# -----------------
mem() {
    lid_file='/proc/acpi/button/lid/LID0/state'
    while grep 'open' "$lid_file" &> /dev/null; do sleep 2; done
    sudo pm-suspend
    grep 'closed' "$lid_file" && mem
    return 0
}
alias hib='sudo pm-hibernate'

# brightness
# ----------
brightness() {
    BL_FILE='/sys/class/backlight/intel_backlight/brightness'
    BL_MAX="$(cat '/sys/class/backlight/intel_backlight/max_brightness')"
    BL_CURR="$(cat "$BL_FILE")"
    if [[ -n "$1" ]]
    then
        sudo zsh -c "echo $(($1 * $BL_MAX / 100)) > $BL_FILE"
    else
        echo "$((100 * $BL_CURR / $BL_MAX))%"
    fi
}


# Media
# =====

# mpv on remote server
# --------------------
remote_mpv() {
    server="$1"
    [[ -z "$server" ]] && return 1
    url="$2"
    [[ -z "$url" ]] && return 1
    ssh $1 'export DISPLAY=:0; mpv '"$url"
}


# Scheduling
# ==========

# schedule today
# --------------
today() {
    day_offset="$1"
    schedule_file="$PERSONAL/schedule.md"
    [[ -z "$day_offset" ]] && day_offset='0'
    day="$(date --date="$day_offset days" +%A | awk '{print tolower($0)}')"
    sed -n '/^'"$day"'$/,/^\w/p' $schedule_file | head --lines=-2
    echo
    date="$(date --date="$day_offset days" +'%b %-d')"
    sed -n '/^'"$date"'$/,/^\w/p' $schedule_file | head --lines=-2
}

# schedule for week
# -----------------
week() {
    week_offset="$1"
    [[ -z "$week_offset" ]] && week_offset='0'
    let day="$week_offset*7"
    for i in 0 1 2 3 4 5 6; do
        let day="$day+$i"
        today $day
    done
}

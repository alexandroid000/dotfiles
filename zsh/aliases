# Default Options
# ===============

# colorized output
# ----------------
alias ls='ls --color=auto'
[[ "$OS_DISTRO" == "freebsd" ]] && alias ls='ls -G'
alias grep='grep --color=auto'
becho() { echo '\033[0;34m'$@'\033[0m' }
gecho() { echo '\033[0;32m'$@'\033[0m' }
recho() { echo '\033[0;31m'$@'\033[0m' }

# convenient cd
# -------------
chpwd() { ls }              # ls when cd
c() {                       # cd with bookmarks
    dirname="$1"
    [[ -z "$dirname" ]] && dirname="$HOME"          # homedir
    if [[ ! -d "$dirname" ]]; then
        case "$dirname" in                          # bookmarks
            500*)       dirname="$HOME/work/uiuc-math500${dirname#500}"                                      ;;
            570*)       dirname="$HOME/work/uiuc-math570${dirname#570}"                                      ;;
            522*)       dirname="$HOME/work/class/uiuc-cs522${dirname#522}"                                  ;;
            dotfiles*)  dirname="$DOTFILES${dirname#dotfiles}"                                               ;;
            fm*)        dirname="$HOME/work/fm_seminar${dirname#fm}"                                         ;;
            kbmc*)      dirname="$HOME/work/k/k-distribution/samples-kore/kernelc/tests/kbmc${dirname#kbmc}" ;;
            k*)         dirname="$HOME/work/k${dirname#k}"                                                   ;;
            mauke*)     dirname="$HOME/work/mauke${dirname#mauke}"                                           ;;
            scratch*)   dirname="$SCRATCH${dirname#scratch}"                                                 ;;
        esac
    fi
    cd "$dirname"
}

# longer tail/head
# ----------------
alias tail='tail -n30'
alias head='head -n30'

# compression
# -----------
alias tarx='tar -xvf'
tarc() { tar -cvf $1.tar $1 }
zipd() { zip -rv $1.zip $1 }
alias unrar='unrar e'

# backup
# ------
backup() {
    dest="$1"
    [[ ! -d "$dest" ]] && return 1
    rsync --progress --partial --archive --verbose --ignore-existing --delete \
        bin docs dotfiles .mail media .passwd src .ssh todo.md work "$dest"
}

# simple web server
# -----------------
alias http='python -m http.server'

# color schemes
# -------------
color() {
    scheme="$1" && shift
    #echo -en "\e]P4264bc2"  # S_blue
    #echo -en "\e]PC4374a6"  # ls blue (default vim blue)
    case "$scheme" in

        dark)
            color_background="080303"
            color_error_code="ec120f"           # vim search error
            color_ps1="128010"
            color_ps2="d33682"
            color_tmux_highlight_background="b15400"
            color_comments="11ff50"
            color_bash_string="2aa198"
            color_bash_var_use="db5b56"
            color_bash_var_decl="4264bc2"       # cmus song status background
            color_cmus_time_bar="c0c0e5"
            color_cmus_song_status_fg="fdf6e3"
            color_htop_percentage_use="002b36"
            color_git_hist_ref_pointer="657b83"
            color_vim_plaintext="5384c6"        # commit ref in git hist
            echo -en "\e]PD6c71c4"  # S_violet
            echo -en "\e]PE93a1a1"  # S_base1   # mispelled headers in vim markdown
            ;;

        light)
            color_background="fee8d5"
            color_error_code="dc322f"           # vim search error
            color_ps1="005b00"
            color_ps2="b31662"
            color_tmux_highlight_background="b58900"
            color_comments="436161"
            color_bash_string="0a9178"
            color_bash_var_use="cb4b16"
            color_bash_var_decl="b67bb2"        # cmus song status background
            color_cmus_time_bar="070602"
            color_cmus_song_status_fg="002b36"
            color_htop_percentage_use="0d0613"
            color_git_hist_ref_pointer="d34446"
            color_vim_plaintext="053bd3"        # commit ref in git hist
            echo -en "\e]PD6c71c4"  # S_violet
            echo -en "\e]PE586e75"  # S_base1   # mispelled headers in vim markdown
            ;;

        *)
            echo "Unrecognized color scheme '$scheme'" >&2
            ;;
    esac

    color_inv_char() {
        color_char="$1"
        case "$color_char" in
            '0') echo 'f' ;;
            '1') echo 'e' ;;
            '2') echo 'd' ;;
            '3') echo 'c' ;;
            '4') echo 'b' ;;
            '5') echo 'a' ;;
            '6') echo '9' ;;
            '7') echo '8' ;;
            '8') echo '7' ;;
            '9') echo '6' ;;
            'a') echo '5' ;;
            'b') echo '4' ;;
            'c') echo '3' ;;
            'd') echo '2' ;;
            'e') echo '1' ;;
            'f') echo '0' ;;
        esac
    }

    color_inv_color() {
        orig_color="$1"
        invd_color=""
        for color_char in $(echo "$orig_color" | grep -o .); do
            invd_color="$invd_color""$(color_inv_char "$color_char")"
        done
        echo "$invd_color"
    }

    if [[ "$1" == 'invert' ]]; then
        shift
        color_background="$(color_inv_color "$color_background")"
        color_error_code="$(color_inv_color "$color_error_code")"
        color_ps1="$(color_inv_color "$color_ps1")"
        color_ps2="$(color_inv_color "$color_ps2")"
        color_tmux_highlight_background="$(color_inv_color "$color_tmux_highlight_background")"
        color_comments="$(color_inv_color "$color_comments")"
        color_bash_var_use="$(color_inv_color "$color_bash_var_use")"
        color_bash_var_decl="$(color_inv_color "$color_bash_var_decl")"
        color_bash_string="$(color_inv_color "$color_bash_string")"
        color_cmus_time_bar="$(color_inv_color "$color_cmus_time_bar")"
        color_cmus_song_status_fg="$(color_inv_color "$color_cmus_song_status_fg")"
        color_htop_percentage_use="$(color_inv_color "$color_htop_percentage_use")"
        color_git_hist_ref_pointer="$(color_inv_color "$color_git_hist_ref_pointer")"
        color_vim_plaintext="$(color_inv_color "$color_vim_plaintext")"
    fi

    if [[ "$1" == 'narrow' ]]; then
        shift
    fi

    if [[ "$1" == 'widen' ]]; then
        shift
    fi

    echo -en "\e]P0$color_background"
    echo -en "\e]P1$color_error_code"
    echo -en "\e]P2$color_ps1"
    echo -en "\e]P3$color_tmux_highlight_background"
    echo -en "\e]P4$color_bash_var_decl"
    echo -en "\e]P5$color_ps2"
    echo -en "\e]P6$color_bash_string"
    echo -en "\e]P7$color_cmus_time_bar"
    echo -en "\e]P8$color_htop_percentage_use"
    echo -en "\e]P9$color_bash_var_use"
    echo -en "\e]PA$color_comments"
    echo -en "\e]PB$color_git_hist_ref_pointer"
    echo -en "\e]PC$color_vim_plaintext"
    echo -en "\e]PF$color_cmus_song_status_fg"

    clear
}


# Shortcuts/Bookmarks
# ===================

# editor
# ------
alias e="$EDITOR"                   # editor

# viewer
# ------
v() {
    pdf="$1" && shift
    case "$pdf" in
        maude)  pdf="$SRC/maude/Maude-manual.pdf"       ;;
    esac
    $VIEWER $pdf $@
}

# browser
# -------
o() {
    header=()
    [[ "$1" == 'spoof' ]] \
        && header=('-header' 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:34.0) Gecko/20100101 Firefox/34.0') \
        && shift
    site="$1" && shift
    [[ -z "$site" ]] && site = 'https://google.com' # homepage
    case "$site" in                                 # bookmarks
        500)    site='http://www.math.illinois.edu/~ruiloja/Math500/'   ;;
        421)    site='https://courses.engr.illinois.edu/cs421/su2016/'  ;;
        522)    site='https://courses.engr.illinois.edu/cs522'          ;;
        github) site='https://github.com'                               ;;
        gitlab) site='https://gitlab-beta.engr.illinois.edu'            ;;
        g|google)
            site="https://www.google.com/search?q="
            search_string="$(echo $@ | tr ' ' '+')"
            site="$site$search_string"
            ;;
        ws)
            site='http://thewatchseries.be/tvshow'
            series="$1"
            case "$series" in
                kimmy)  series="unbreakable-kimmy-schmidt"              ;;
                got)    series="game-of-thrones"                        ;;
                sil)    series="silicon-valley"                         ;;
                robot)  series="mr-robot"                               ;;
            esac
            site="$site/$series"
            ;;
    esac
    $BROWSER $header $site
}

# printing
# --------
p() {
    copies='1' && echo "$1" | grep '^[0-9]*$' &>/dev/null && copies="$1"                 && shift
    sides=''   && [[ "$1" == 'onesided' ]]                && sides='-o sides=one-sided'  && shift
    pages=''   && [[ "$1" == 'pages'    ]]                && pages='-o page-ranges='"$2" && shift && shift

    file="$1" && [[ ! -f "$file" ]] && echo "No file '$file'" && return 1
    shift

    lpr '-#'$copies $pages $sides $@ "$file"
}

# crop pdf
# --------
crop_pdf() {
    start_page="$1"
    stop_page="$2"
    input_file="$3"
    output_file="$4"
    [[ -z "$start_page" ]] || [[ -z "$stop_page" ]] \
        || [[ ! -f "$input_file" ]] || [[ -z "$output_file" ]] \
        && return 1
    gs -dFirstPage="$start_page" -dLastPage="$stop_page" \
        -sOutputFile="$output_file" -dSAFER -dNOPAUSE -dBATCH \
        -dPDFSETTING=/default -sDEVICE=pdfwrite -dCompressFonts=true \
        -c ".setpdfwrite << /EncodeColorImages true /DownsampleMonoImages false \
        /SubsetFonts true /ASCII85EncodePages false \
        /DefaultRenderingIntent /Default /ColorConversionStrategy \
        /LeaveColorUnchanged /MonoImageDownsampleThreshold 1.5 \
        /ColorACSImageDict << /VSamples [ 1 1 1 1 ] /HSamples [ 1 1 1 1 ] \
        /QFactor 0.4 /Blend 1 >> /GrayACSImageDict << /VSamples [ 1 1 1 1 ] \
        /HSamples [ 1 1 1 1 ] /QFactor 0.4 /Blend 1 >> \
        /PreserveOverprintSettings false /MonoImageResolution 300 \
        /MonoImageFilter /FlateEncode /GrayImageResolution 300 \
        /LockDistillerParams false /EncodeGrayImages true /MaxSubsetPCT 100 \
        /GrayImageDict << /VSamples [ 1 1 1 1 ] /HSamples [ 1 1 1 1 ] \
        /QFactor 0.4 /Blend 1 >> /ColorImageFilter /FlateEncode \
        /EmbedAllFonts true /UCRandBGInfo /Remove /AutoRotatePages /PageByPage \
        /ColorImageResolution 300 /ColorImageDict << /VSamples [ 1 1 1 1 ] \
        /HSamples [ 1 1 1 1 ] /QFactor 0.4 /Blend 1 >> /CompatibilityLevel 1.7 \
        /EncodeMonoImages true /GrayImageDownsampleThreshold 1.5 \
        /AutoFilterGrayImages false /GrayImageFilter /FlateEncode \
        /DownsampleGrayImages false /AutoFilterColorImages false \
        /DownsampleColorImages false /CompressPages true \
        /ColorImageDownsampleThreshold 1.5 /PreserveHalftoneInfo false >> \
        setdistillerparams" -f "$input_file"
}

# markdown publishing
md() {
    format="$1"
    md_doc="$2"

    case "$format" in
        markdown) ext='md'      ;;
        latex)    ext='pdf'     ;;
        beamer)   ext='pdf'     ;;
        *)        ext="$format" ;;
    esac

    pandoc --standalone --filter=pandoc-citeproc \
           --from=markdown --to="$format" \
           --output="${md_doc%.*}.$ext" "$md_doc" \
           || echo "pandoc error ..." >&2
}


# System
# ======

# hardware aliases
# ----------------
alias mem='hw mem'

# copy etc
# --------
cp_etc() {
    dir="$1"
    [[ ! -d "$DOTFILES/etc/$dir" ]] && return 1
    files=($(find "$DOTFILES/etc/$dir" -type f))
    for file in $files; do
        dest="$ETC/${file#$DOTFILES/etc/}"
        echo "copying '$file' to '$dest'..."
    done
    for file in $(find "$DOTFILES/etc/$dir" -type f); do
        dest="$ETC/${file#$DOTFILES/etc/}"
        sudo cp "$file" "$dest"
    done
}

# kernel building
# ---------------
rebuild_kernel() {
    sudo mount /dev/sda2 /boot
    sudo make -j5 -l15 \
        && sudo make modules_install \
        && sudo make install \
        && sudo grub2-mkconfig -o /boot/grub/grub.cfg
}


# Scheduling
# ==========

# schedule today
# --------------
today() {
    day_offset="$1"
    schedule_file="$PERSONAL/schedule.md"
    [[ -z "$day_offset" ]] && day_offset='0'
    dDay="$(date --date="$day_offset days" +%A | awk '{print tolower($0)}')"
    dDate="$(date --date="$day_offset days" +'%b %-d')"
    pandoc-tangle --from=markdown --to=markdown \
                  --section="$dDay|$dDate" "$schedule_file"
}


# X-11
# ====

# startx aliases
# --------------
alias mpv='startx /usr/bin/mpv'
alias firefox='startx /usr/bin/firefox -width 1920 -height 1080'
alias firefoxsmall='startx /usr/bin/firefox -width 1680 -height 1050'
alias private='startx /usr/bin/firefox -private'

# mpv on remote server
# --------------------
remote_mpv() {
    server="$1"
    [[ -z "$server" ]] && return 1
    url="$2"
    [[ -z "$url" ]] && return 1
    ssh $1 'export DISPLAY=:0; mpv '"$url"
}

# remote x control
# ----------------
xdo_remote() {
    ssh_serv="$1"
    [[ -z "$ssh_serv" ]] && return 1
    remote_command='export DISPLAY=:0; while read key_line; do'
    remote_command="$remote_command"' xdotool key $keyline; done'
    xdotoolize | ssh "$ssh_serv" "$remote_command"
}

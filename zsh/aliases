# Default Options
# ===============

# colors
# ------
alias ls='ls --color=auto'
[[ "$OS_DISTRO" == "freebsd" ]] && alias ls='ls -G'
alias grep='grep --color=auto'
becho() { echo '\033[0;34m'$@'\033[0m' }
gecho() { echo '\033[0;32m'$@'\033[0m' }
recho() { echo '\033[0;31m'$@'\033[0m' }

# convenient cd
# -------------
chpwd() { ls }              # ls when cd
c() {                       # cd with bookmarks
    dirname="$1"
    [[ -z "$dirname" ]] && dirname="$HOME"          # homedir
    case "$dirname" in                              # bookmarks
        421)        dirname="$HOME/work/cs421"                      ;;
        522)        dirname="$HOME/work/uiuc-cs522"                 ;;
        526)        dirname="$HOME/work/uiuc-cs526"                 ;;
        ctl)        dirname="$HOME/work/llvm-semantics/semantics"   ;;
        homod)      dirname="$HOME/work/homod"                      ;;
        menlo)      dirname="$HOME/work/menlo"                      ;;
        scratch)    dirname="$SCRATCH"                              ;;
    esac
    cd "$dirname"
}

# longer tail/head
# ----------------
alias tail='tail -n30'
alias head='head -n30'

# compression
# -----------
alias tarx='tar -xvf'
tarc() { tar -cvf $1.tar $1 }
zipd() { zip -rv $1.zip $1 }
alias unrar='unrar e'


# Shortcuts
# =========

# app specifiers
# --------------
alias e="$EDITOR"                   # editor
alias o="$BROWSER"                  # browser
alias gg='sr duckduckgo'            # search
v="$VIEWER"                   # viewer
function pdf() {
    mupdf "$1" &
}

alias v="$VIEWER"                   # viewer
alias gg='sr google'                # search

# broswer
# -------
o() {
    site="$1"
    [[ -z "$site" ]] && site = 'https://google.com' # homepage
    case "$site" in                                 # bookmarks
        421)    site='http://courses.engr.illinois.edu/cs421'   ;;
        522)    site='http://courses.engr.illinois.edu/cs522'   ;;
        526)    site='http://courses.engr.illinois.edu/cs526'   ;;
        gitlab) site='https://gitlab-beta.engr.illinois.edu'    ;;
        menlo)  site='http://fm.csl.sri.com/SSFT16/'            ;;
        ws)
            site='http://thewatchseries.be/tvshow'
            series="$2"
            case "$series" in
                kimmy)  series="unbreakable-kimmy-schmidt"      ;;
                got)    series="game-of-thrones"                ;;
            esac
            site="$site/$series"
            ;;
    esac
    $BROWSER $site
}

# printing
# --------
p() {
    copies='1'
    sides=''
    echo "$1" | grep '^[0-9]*$' &>/dev/null && copies="$1" && shift
    [[ "$1" == 'onesided' ]] && sides='-o sides=one-sided' && shift
    lpr '-#'$copies $sides $@
}

# crop pdf
# --------
crop_pdf() {
    start_page="$1"
    stop_page="$2"
    input_file="$3"
    output_file="$4"
    [[ -z "$start_page" ]] || [[ -z "$stop_page" ]] \
        || [[ ! -f "$input_file" ]] || [[ -z "$output_file" ]] \
        && return 1
    gs -dFirstPage="$start_page" -dLastPage="$stop_page" \
        -sOutputFile="$output_file" -dSAFER -dNOPAUSE -dBATCH \
        -dPDFSETTING=/default -sDEVICE=pdfwrite -dCompressFonts=true \
        -c ".setpdfwrite << /EncodeColorImages true /DownsampleMonoImages false \
        /SubsetFonts true /ASCII85EncodePages false \
        /DefaultRenderingIntent /Default /ColorConversionStrategy \
        /LeaveColorUnchanged /MonoImageDownsampleThreshold 1.5 \
        /ColorACSImageDict << /VSamples [ 1 1 1 1 ] /HSamples [ 1 1 1 1 ] \
        /QFactor 0.4 /Blend 1 >> /GrayACSImageDict << /VSamples [ 1 1 1 1 ] \
        /HSamples [ 1 1 1 1 ] /QFactor 0.4 /Blend 1 >> \
        /PreserveOverprintSettings false /MonoImageResolution 300 \
        /MonoImageFilter /FlateEncode /GrayImageResolution 300 \
        /LockDistillerParams false /EncodeGrayImages true /MaxSubsetPCT 100 \
        /GrayImageDict << /VSamples [ 1 1 1 1 ] /HSamples [ 1 1 1 1 ] \
        /QFactor 0.4 /Blend 1 >> /ColorImageFilter /FlateEncode \
        /EmbedAllFonts true /UCRandBGInfo /Remove /AutoRotatePages /PageByPage \
        /ColorImageResolution 300 /ColorImageDict << /VSamples [ 1 1 1 1 ] \
        /HSamples [ 1 1 1 1 ] /QFactor 0.4 /Blend 1 >> /CompatibilityLevel 1.7 \
        /EncodeMonoImages true /GrayImageDownsampleThreshold 1.5 \
        /AutoFilterGrayImages false /GrayImageFilter /FlateEncode \
        /DownsampleGrayImages false /AutoFilterColorImages false \
        /DownsampleColorImages false /CompressPages true \
        /ColorImageDownsampleThreshold 1.5 /PreserveHalftoneInfo false >> \
        setdistillerparams" -f "$input_file"
}

# copy etc
# --------
cp_etc() {
    dir="$1"
    [[ ! -d "$DOTFILES/etc/$dir" ]] && return 1
    for file in $(find "$DOTFILES/etc/$dir" -type f); do
        sudo cp "$file" "${file#$DOTFILES}"
    done
}

# ogv format to mp3 (audio only)
# ------------------------------
ogv2mp3() {
    ogvfile="$1"
    fname="${ogvfile%\.*}"
    ffmpeg -i "$ogvfile" "$fname".mp3
}

# sd card utils
# -------------

sd_clear() {
    sudo mount '/dev/sdb1' '/mnt/sd'
    sudo rm '/mnt/sd/data.txt'
    sudo umount '/mnt/sd'
}

sd_copy() {
    destination="$1"
    sudo mount '/dev/sdb1' '/mnt/sd'
    cp '/mnt/sd/data.txt' "$destination"
    sudo umount '/mnt/sd'
}

# ROS utils
# ---------

indigo() {
  source /opt/ros/indigo/setup.zsh
  export PYTHONPATH=/opt/ros/indigo/lib/python2.7/site-packages:$PYTHONPATH
  export PKG_CONFIG_PATH="/opt/ros/indigo/lib/pkgconfig:$PKG_CONFIG_PATH"

  # Useful aliases
  alias catkin_make="catkin_make -DPYTHON_EXECUTABLE=/usr/bin/python2 -DPYTHON_INCLUDE_DIR=/usr/include/python2.7 -DPYTHON_LIBRARY=/usr/lib/libpython2.7.so"

  # If you use Gazebo:
  #source /usr/share/gazebo/setup.sh
}

# replace "localhost" in URI so ghc can resolve it?
fix_ros_ip() {
    if [[ "${ROS_MASTER_URI#*localhost}" != "$ROS_MASTER_URI" ]]; then
        uri="${ROS_MASTER_URI##*localhost:}"
        export ROS_MASTER_URI="http://127.0.0.1:"$uri
    fi
}


# save/go (for directories)
# -------------------------
s() {
    dir_alias="$1"
    [[ -z "$dir_alias" ]] && dir_alias="default"
    echo "$dir_alias=$(pwd)" >> "$HOME/dotfiles/zsh/old_dirs"
}
g() {
    dir_alias="$1"
    [[ -z "$dir_alias" ]] && dir_alias="default"
    source "$HOME/dotfiles/zsh/old_dirs"
    eval next_dir="\$$dir_alias"
    [[ -z "$next_dir" ]] && return 1
    cd "$next_dir"
}

# download cs421 video
# --------------------
cs421_vid() {
    vid="$1"
    [[ -z "$vid" ]] && return 1
    wget 'https://courses.engr.illinois.edu/cs421/static/videos/'"$vid/$vid"'.mp4'
}

# easy-launch X sessions
# ----------------------
alias emul='startx /usr/bin/qemu-system-x86_64 -kernel'
alias mpv='startx /usr/bin/mpv'
alias firefox='startx /usr/bin/firefox'
alias private='startx /usr/bin/firefox -private'

# backup
# ------
backup() {
    dest="$1"
    [[ ! -d "$dest" ]] && return 1
    rsync --progress --partial --archive --verbose --ignore-existing --delete \
        bin docs dotfiles .mail media .passwd src .ssh todo.md work "$dest"
}


# Remote Control
# ==============

# remote x control
# ----------------
xdo_remote() {
    ssh_serv="$1"
    [[ -z "$ssh_serv" ]] && return 1
    xdotoolize | ssh "$ssh_serv" 'export DISPLAY=:0; while read key_line; do \
        xdotool key $key_line; done'
}

# remote printing
# ---------------
remote_print() {
    file="$1"
    ssh_server="$2"
    printer="$3"
    [[ ! -f "$file" ]]     && return 1
    [[ -z "$ssh_server" ]] && ssh_server="ews"
    [[ -z "$printer" ]]    && printer="siebl-0403-bwd1"
    #[[ -z "$printer" ]]    && printer="siebl-2203-printer"
    cat "$file" | ssh "$ssh_server" "lpr -C $file -P $printer"
}

# Hardware
# ========

# system-stats
# ------------
alias bat='cat /sys/class/power_supply/BAT0/power_now'
alias temp='ls -d /sys/class/thermal/thermal_zone* | xargs -I f cat f/temp'

# wireless
# --------
wifi_connect() {
    wifi_file="$DOTFILES/wifi"
    net_card="wlp4s0"
    sudo pkill wpa_supplicant
    sudo dhcpcd -k
    sudo wpa_supplicant -B -Dnl80211 -i"$net_card" -c"$wifi_file"
    sudo dhcpcd "$net_card"
}
alias wifi_scan='sudo iw dev wlp4s0 scan | grep "SSID:"'
alias wifi_del='sudo ip addr del 169.254.137.85/16 dev wlp4s0'

# suspend/hibernate
# -----------------
mem() {
    lid_file='/proc/acpi/button/lid/LID0/state'
    while grep 'open' "$lid_file" &> /dev/null; do sleep 2; done
    sudo pm-suspend
    grep 'closed' "$lid_file" && mem
    return 0
}
alias hib='sudo pm-hibernate'

# brightness
# ----------
brightness() {
    BL_FILE='/sys/class/backlight/intel_backlight/brightness'
    BL_MAX="$(cat '/sys/class/backlight/intel_backlight/max_brightness')"
    BL_CURR="$(cat "$BL_FILE")"
    if [[ -n "$1" ]]
    then
        sudo zsh -c "echo $(($1 * $BL_MAX / 100)) > $BL_FILE"
    else
        echo "$((100 * $BL_CURR / $BL_MAX))%"
    fi
}

# Media
# =====

# mpv on remote server
# --------------------
remote_mpv() {
    server="$1"
    [[ -z "$server" ]] && return 1
    url="$2"
    [[ -z "$url" ]] && return 1
    ssh $1 'export DISPLAY=:0; mpv '"$url"
}

# reset wireless card
# -------------------
rip() {
    sudo ip link set wlp2s0 down
    echo "wlp2s0 down"
    sleep 10
    sudo ip link set wlp2s0 up
    echo "wlp2s0 up"
}

# dual monitor display
# --------------------
alias xmonitor="xrandr --output VGA1 --auto --left-of eDP1"

# Scheduling
# ==========

# schedule today
# --------------
today() {
    day_offset="$1"
    schedule_file="$PERSONAL/schedule.md"
    [[ -z "$day_offset" ]] && day_offset='0'
    day="$(date --date="$day_offset days" +%A | awk '{print tolower($0)}')"
    sed -n '/^'"$day"'$/,/^\w/p' $schedule_file | head --lines=-2
    echo
    date="$(date --date="$day_offset days" +'%b %-d')"
    sed -n '/^'"$date"'$/,/^\w/p' $schedule_file | head --lines=-2
}

# schedule for week
# -----------------
week() {
    week_offset="$1"
    [[ -z "$week_offset" ]] && week_offset='0'
    let day="$week_offset*7"
    for i in 0 1 2 3 4 5 6; do
        let day="$day+$i"
        today $day
    done
}
